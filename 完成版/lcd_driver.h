#ifndef	__LCD_DRIVER_h__
#define	__LCD_DRIVER_h__
//	write your header here

//============================================================================================
//*** 函    数: sdelay()
//*** 功    能：延时函数
//*** 参    数: 延时计数数据
//============================================================================================
extern void sdelay(unsigned long x);
//============================================================================================    
//*** 函    数:send_data()
//*** 功    能：液晶串行移位数据
//*** 参    数: data   串行移位的数据
//============================================================================================
extern void send_data(unsigned char data);     //高A口8位为待送数据
//============================================================================================    
//*** 函    数:write_data()
//*** 功    能: 写数据
//*** 参    数: data   RW=1,RS=1时传送的数据指令
//============================================================================================
extern void write_data(unsigned char data);          	//低八位是待写入数据    data2中存放高4位数据，data3中存放低4位数据
//============================================================================================    
//*** 函    数:write_comm()
//*** 功    能: 写命令
//*** 参    数: data   RW=0,RS=0时传送的命今指令
//============================================================================================
extern void write_comm(unsigned char data);			//低八位是待写入数据,data2中存放高4位数据，data3中存放低4位数据
//============================================================================================    
//*** 函    数:init_lcd()
//*** 功    能: LCM初始化
//*** 参    数: 无
//============================================================================================
extern void init_lcd(void);
//=============================================================================================
//*** 函    数:Delay()
//*** 功    能：延时
//*** 参    数: x     延时的时间
//============================================================================================
//extern void  Delay(unsigned int x); 
//============================================================================================    
//*** 函    数:screen()
//*** 功    能: 全屏显示
//*** 参    数: data   基本指令集下要显示一维数组
//============================================================================================
extern void screen(unsigned char data[]);
//============================================================================================    
//*** 函    数:GUI_ClearSCR()
//*** 功    能: 清屏（扩充指令集下）
//*** 参    数: mode:  模式
//                   0:基本指令集
//                   1:扩充指令集
//============================================================================================
extern void GUI_ClearSCR(char mode);
//============================================================================================    
//*** 函    数:GUI_FillSCR()
//*** 功    能:全屏填充（扩充指令集下）OR 全屏反显（基本指令集下）
//*** 参    数:无
//============================================================================================
extern void GUI_FillSCR(void);
//============================================================================================    
//*** 函    数:GUI_BEGIN()
//*** 功    能: GUI开始 （注：在使用此液晶绘图时，不知为何，总是从第二个开始，所以在绘图前先写一个）
//*** 参    数: 无
//============================================================================================
extern void GUI_BEGIN(void);
//============================================================================================    
//*** 函    数:LCM_WriteByte()
//*** 功    能: 向LCM写一个字,同时也修改缓冲区的值（扩充指令集下）
//*** 参    数: x          LCM的X坐标
//              y          LCM的Y坐标
//              wrdata     写入的数据
//============================================================================================
extern void LCM_WriteByte(char x,char y,int wrdata);
//============================================================================================    
//*** 函    数:LCM_ReadByte()
//*** 功    能: 读取缓冲区的值（扩充指令集下）
//*** 参    数: x      LCM的X坐标
//              y      LCM的Y坐标
//============================================================================================
extern int LCM_ReadByte(char x,char y);
//============================================================================================    
//*** 函    数:GUI_Point()
//*** 功    能: 画点（扩充指令集下）
//*** 参    数: x          LCM的X坐标
//              y          LCM的Y坐标
//              colour     颜色(0 白,1 黑)
//============================================================================================
extern void GUI_Point(char x,char y,char colour) ; 
//============================================================================================    
//*** 函    数:GUI_HLine()
//*** 功    能: 画水平线（扩充指令集下）
//*** 参    数: x0       线的起始X坐标
//              y        线的Y坐标
//              x1       线的终止X坐标
//              colour   颜色(0 白,1 黑)
//============================================================================================
extern void GUI_HLine(char x0,char y,char x1,char colour);
//============================================================================================    
//*** 函    数:GUI_RLine()
//*** 功    能: 画垂直线（扩充指令集下）
//*** 参    数: x        线的X坐标
//              y0       线的起始Y坐标
//              y1       线的终止Y坐标
//              colour   颜色(0 白,1 黑)
//============================================================================================
extern void GUI_RLine(char x,char y0,char y1,char colour);
//============================================================================================    
//*** 函    数:LCM_	DLine()
//*** 功    能: 画斜线（扩充指令集下）
//*** 参    数: x0       线的起始X坐标
//              y0       线的起始Y坐标
//              x1       线的终止X坐标
//              y1       线的终止Y坐标
//              colour   颜色(0 白,1 黑)
//============================================================================================
extern void GUI_DLine(char x0,char y0,char x1,char y1,char colour);
//============================================================================================    
//*** 函    数:GUI_Cos()
//*** 功    能: 画余弦曲线（扩充指令集下）
//*** 参    数: x0       曲线的起始X坐标
//              x1       曲线的终止X坐标
//              w        曲线的角速度
//              f        曲线的相位
//              A        曲线的幅度
//              B        曲线的中心位置(Y)
//              colour  颜色(0 白,1 黑)
//============================================================================================
extern void GUI_Cos(char x0,char x1,double w,double f,float A,float B,char colour); 
//============================================================================================    
//*** 函    数:GUI_Sin()
//*** 功    能: 画正弦曲线（扩充指令集下）
//*** 参    数: x0       曲线的起始X坐标
//              x1       曲线的终止X坐标
//              w        曲线的角速度
//              f        曲线的相位
//              A        曲线的幅度
//              B        曲线的中心位置(Y)
//              colour  颜色(0 白,1 黑)
//============================================================================================
extern void GUI_Sin(char x0,char x1,double w,double f,float A,float B,char colour); 
//============================================================================================    
//*** 函    数:GUI_Paint()
//*** 功    能: 画正弦曲线（扩充指令集下）
//*** 参    数: paint_buffer       要显示的图像的字模
//============================================================================================
extern void GUI_Paint(unsigned int paint_buffer[64][16]);
//======================================================
// 函    数：	LCD701_Circle
// 说    明：	画一个圆
// 参    数：		x - 圆心的横坐标，范围0到119（左->右）
//				y - 圆心的纵坐标，范围0到51（上->下）
//				r - 圆的半径
//				Mode - 绘制模式，可以是下列数值之一：
//				        0:	空心圆
//				        1:	实心圆
//======================================================
extern void GUI_Circle(unsigned x,unsigned y,unsigned r,unsigned Mode,char colour);
//======================================================
// 函    数：	LCD701_Rectangle
// 说    明：	画一个矩形
// 参数：		left - 矩形的左上角横坐标，范围0到118
//				top - 矩形的左上角纵坐标，范围0到50
//				right - 矩形的右下角横坐标，范围1到119
//				bottom - 矩形的右下角纵坐标，范围1到51
//				Mode - 绘制模式，可以是下列数值之一：
//					0:	矩形框（空心矩形）
//					1:	矩形面（实心矩形）
//======================================================
extern void GUI_Rectangle(unsigned left, unsigned top, unsigned right, unsigned bottom, unsigned Mode,char colour);

extern void disp_line(unsigned char line,unsigned char data[]);

extern void paint(unsigned char data[]);

extern unsigned char paint_buffer[1024];

extern unsigned char paint_buffer1[1024];

extern void lcd_demo(void);

extern void location(int y,int x);

extern void display( char *str);


//==========================================================
//      在LCD上显示时间
//==========================================================
extern void  clock_disp();
extern void  zlg_disp();

//extern void Timer0A_ISR(void);

//extern void  Timer2B_ISR(void)
#endif
